import { OpenAI } from 'openai';
import { storage } from './storage';
import { nailItAPI } from './nailit-api';
import { nailItValidator } from './nailit-validator';
import type { Customer, Product, FreshAISettings } from '@shared/schema';
import type { NailItItem, NailItStaff, NailItTimeSlot, NailItPaymentType } from './nailit-api';

// SLOT-FILLING INTEGRATION: Import all slot-filling modules
import { BookingState, BookingStateManager } from './booking-state-manager.js';
import { SlotFillingOrchestrator } from './slot-filling-orchestrator.js';
import { slotFillingAgent } from './ai-slot-filling.js';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface AIResponse {
  message: string;
  suggestedServices?: NailItItem[];
  collectionPhase?: 'greeting' | 'service_selection' | 'location_selection' | 'staff_selection' | 'time_selection' | 'customer_info' | 'payment_method' | 'confirmation' | 'completed';
  collectedData?: {
    selectedServices?: Array<{
      itemId: number;
      itemName: string;
      price: number;
      quantity: number;
    }>;
    locationId?: number;
    locationName?: string;
    staffId?: number;
    staffName?: string;
    timeSlotIds?: number[];
    timeSlotNames?: string[];
    appointmentDate?: string; // DD-MM-YYYY format
    customerName?: string;
    customerEmail?: string;
    paymentTypeId?: number;
    paymentTypeName?: string;
    totalAmount?: number;
    readyForBooking?: boolean;
  };
  nextStep?: string;
  error?: string;
}

export interface ConversationState {
  phase: 'greeting' | 'service_selection' | 'location_selection' | 'date_selection' | 'time_selection' | 'staff_selection' | 'customer_info' | 'payment_method' | 'order_summary' | 'confirmation' | 'completed';
  collectedData: {
    selectedServices: Array<{
      itemId: number;
      itemName: string;
      price: number;
      quantity: number;
      duration?: string;
      description?: string;
    }>;
    availableServices?: NailItItem[];
    locationId?: number;
    locationName?: string;
    appointmentDate?: string;
    preferredTime?: string;
    availableTimeSlots?: NailItTimeSlot[];
    timeSlotIds?: number[];
    timeSlotNames?: string[];
    availableStaff?: NailItStaff[];
    staffId?: number;
    staffName?: string;
    customerName?: string;
    customerEmail?: string;
    customerPhone?: string;
    nailItCustomerId?: number;
    paymentTypeId?: number;
    paymentTypeName?: string;
    totalAmount?: number;
    orderSummaryShown?: boolean;
    readyForBooking?: boolean;
  };
  language: 'en' | 'ar';
  lastUpdated: Date;
}

class FreshAIAgent {
  private conversationStates: Map<string, ConversationState> = new Map();
  private settings: FreshAISettings;
  private nailItAPIClient = nailItAPI;
  private storage = storage;

  constructor() {
    this.settings = {} as FreshAISettings;
    this.initialize();
  }

  private async initialize() {
    this.settings = await storage.getFreshAISettings();
    console.log('üîÑ Fresh AI Settings loaded:', {
      systemPromptEN: this.settings.systemPromptEN?.substring(0, 100) + '...',
      systemPromptAR: this.settings.systemPromptAR?.substring(0, 50) + '...'
    });
  }

  async processMessage(
    customerMessage: string,
    customer: Customer,
    conversationId: number
  ): Promise<AIResponse> {
    await this.initialize();
    console.log(`ü§ñ Fresh AI processing message from ${customer.name}: "${customerMessage}"`);
    
    try {
      // SLOT-FILLING INTEGRATION: Load or initialize booking state
      let bookingState = await BookingStateManager.getBookingState(conversationId);
      if (!bookingState) {
        bookingState = BookingStateManager.createNewBookingState(conversationId, customer.id);
        console.log('üìù Created new booking state for conversation:', conversationId);
      }

      // SIMPLIFIED AI PROCESSING: Use natural conversation without complex slot-filling
      console.log('üéØ Using simplified AI conversation processing...');
      
      // Create basic conversation context
      const conversationHistory = [];
      try {
        const messages = await this.storage.getMessages(conversationId);
        conversationHistory.push(...messages.slice(-6).map(msg => ({
          content: msg.content,
          isFromAI: msg.isFromAI
        })));
      } catch (error) {
        console.log('No conversation history available');
      }
      
      // Process with natural conversation AI
      const aiResponse = await this.handleNaturalConversation(
        customerMessage, 
        {
          phase: 'greeting',
          collectedData: { selectedServices: [] },
          language: this.detectLanguage(customerMessage),
          lastUpdated: new Date()
        },
        customer,
        conversationHistory
      );
      
      console.log('‚úÖ AI RESPONSE GENERATED:', {
        message: aiResponse.message?.substring(0, 100) + '...',
        phase: aiResponse.collectionPhase
      });

      // Return the AI response directly
      return aiResponse;

    } catch (error) {
      console.error('‚ùå Fresh AI processing error:', error);
      return {
        message: "I'm sorry, I encountered an issue. Could you please try again?",
        collectionPhase: 'greeting',
        error: 'Processing error occurred'
      };
    }
  }

  /**
   * Complete booking using NailIt API (called when all slots are filled)
   */
  private async completeBookingWithNailItAPI(bookingState: BookingState, customer: Customer): Promise<AIResponse> {
    try {
      console.log('üéØ CREATING NAILIT ORDER with booking state:', bookingState);

      // Create NailIt order using collected booking information
      const orderData = {
        customerId: customer.id,
        customerName: bookingState.name.value || customer.name,
        customerEmail: bookingState.email.value || customer.email || `${customer.phoneNumber}@nailit.com`,
        phoneNumber: customer.phoneNumber,
        serviceId: bookingState.service.id!,
        serviceName: bookingState.service.name!,
        servicePrice: bookingState.service.price!,
        locationId: bookingState.location.id!,
        locationName: bookingState.location.name!,
        appointmentDate: bookingState.date.value!,
        timeSlots: bookingState.time.timeSlots || [7, 8],
        totalAmount: bookingState.service.price!
      };

      const orderResult = await nailItAPI.createOrderWithUser(orderData);
      
      if (orderResult && orderResult.OrderId) {
        // Clear booking state after successful completion
        await BookingStateManager.clearBookingState(bookingState.conversationId);

        const confirmationMessage = bookingState.language === 'ar' 
          ? `‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ¨ÿ≤ ÿ®ŸÜÿ¨ÿßÿ≠!\n\nÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${orderResult.OrderId}\nÿßŸÑÿÆÿØŸÖÿ©: ${bookingState.service.name}\nÿßŸÑŸÖŸàŸÇÿπ: ${bookingState.location.name}\nÿßŸÑÿ™ÿßÿ±ŸäÿÆ: ${bookingState.date.value}\n\nÿ±ÿßÿ®ÿ∑ ÿßŸÑÿØŸÅÿπ: http://nailit.innovasolution.net/knet.aspx?orderId=${orderResult.OrderId}`
          : `‚úÖ Booking Created Successfully!\n\nOrder ID: ${orderResult.OrderId}\nService: ${bookingState.service.name}\nLocation: ${bookingState.location.name}\nDate: ${bookingState.date.value}\n\nPayment Link: http://nailit.innovasolution.net/knet.aspx?orderId=${orderResult.OrderId}`;

        return {
          message: confirmationMessage,
          collectionPhase: 'completed',
          collectedData: this.mapBookingStateToCollectedData(bookingState)
        };
      } else {
        throw new Error('Failed to create NailIt order');
      }
    } catch (error) {
      console.error('‚ùå BOOKING COMPLETION ERROR:', error);
      return {
        message: "Sorry, there was an issue completing your booking. Please try again or contact our support team.",
        collectionPhase: 'confirmation',
        error: 'Booking completion failed'
      };
    }
  }

  /**
   * Map booking state step to legacy phase format
   */
  private mapStepToPhase(step: string): any {
    const phaseMap: any = {
      'service': 'service_selection',
      'location': 'location_selection', 
      'date': 'time_selection',
      'time': 'time_selection',
      'name': 'customer_info',
      'email': 'customer_info',
      'confirmation': 'confirmation',
      'complete': 'completed'
    };
    return phaseMap[step] || 'greeting';
  }

  /**
   * Map booking state to legacy collected data format
   */
  private mapBookingStateToCollectedData(bookingState: BookingState): any {
    return {
      selectedServices: bookingState.service.validated ? [{
        itemId: bookingState.service.id,
        itemName: bookingState.service.name,
        price: bookingState.service.price,
        quantity: 1
      }] : [],
      locationId: bookingState.location.id,
      locationName: bookingState.location.name,
      appointmentDate: bookingState.date.value,
      timeSlots: bookingState.time.timeSlots,
      customerName: bookingState.name.value,
      customerEmail: bookingState.email.value,
      totalAmount: bookingState.service.price,
      readyForBooking: BookingStateManager.isBookingReady(bookingState)
    };
  }

  private async handleNaturalConversation(
    customerMessage: string,
    state: ConversationState,
    customer: Customer,
    conversationHistory: Array<{ content: string; isFromAI: boolean }>
  ): Promise<AIResponse> {
    try {
      console.log('üöÄ Natural conversation with real booking integration');
      
      // Enhanced human-like system prompt with PROGRESSION LOGIC
      const enhancedSystemPrompt = `You are Tamy, a caring customer service representative for NailIt Spa Kuwait. 

YOUR PERSONALITY:
- Warm, empathetic, and genuinely helpful
- Listen carefully to customer needs
- Ask ONE question at a time, naturally
- Never rush customers - guide them step by step
- Show understanding for their beauty concerns

CONVERSATION PROGRESSION RULES (CRITICAL):
- If customer confirms a service recommendation with "yes" ‚Üí MOVE to location selection
- If customer says "Yes I want to improve..." ‚Üí This means they ACCEPT the service, ask for location  
- If customer says "yes" to location ‚Üí MOVE to date selection  
- If customer provides date ‚Üí MOVE to name/email collection
- NEVER repeat the same question if customer already answered
- NEVER suggest the same service twice in a row
- If customer repeats the same request ‚Üí They're confirming, don't ask again

CURRENT CUSTOMER DATA: ${JSON.stringify(state.collectedData)}
CUSTOMER PHONE: ${customer.phoneNumber}

CONVERSATION STATUS:
Services Selected: ${state.collectedData.selectedServices.length > 0 ? state.collectedData.selectedServices.map(s => s.itemName).join(', ') : 'None'}
Location: ${state.collectedData.locationName || 'Not selected'}
Date: ${state.collectedData.appointmentDate || 'Not selected'}
Name: ${state.collectedData.customerName || 'Not collected'}

STEP-BY-STEP PROCESS:
1. If NO services selected ‚Üí Ask what service they want
2. If services selected but NO location ‚Üí Ask which location 
3. If location selected but NO date ‚Üí Ask preferred date
4. If date selected but NO name/email ‚Üí Collect customer info
5. If all info collected ‚Üí Confirm and create booking

LOCATIONS: Al-Plaza Mall, Zahra Complex, Arraya Mall

CRITICAL FIXES:
- Don't repeat service recommendations if already selected
- Progress conversation step by step
- Recognize "yes" as confirmation to move forward
- Never loop back to previous steps unless customer asks

Customer message: "${customerMessage}"`;

      const conversationMessages = [
        {
          role: 'system' as const,
          content: enhancedSystemPrompt
        },
        ...(Array.isArray(conversationHistory) ? conversationHistory.slice(-12) : []).map((msg: any) => ({
          role: msg.isFromAI ? 'assistant' as const : 'user' as const,
          content: msg.content
        })),
        {
          role: 'user' as const,
          content: customerMessage
        }
      ];
      
      const response = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: conversationMessages,
        temperature: 0.7,
        max_tokens: 300
      });

      const aiMessage = response.choices[0]?.message?.content || 
        (state.language === 'ar' ? 'ÿπÿ∞ÿ±ÿßŸãÿå ŸÑŸÖ ÿ£ŸÅŸáŸÖ ÿ∑ŸÑÿ®ŸÉ.' : "Sorry, I didn't understand your request.");
      
      console.log('ü§ñ AI Response:', aiMessage);
      
      // CRITICAL FIX: Add conversation phase progression logic
      await this.updateConversationPhase(customerMessage, state);
      
      // NATURAL INFORMATION EXTRACTION - Update state from conversation
      await this.extractAndUpdateInformation(customerMessage, aiMessage, state);
      
      // CRITICAL FIX: NEVER attempt booking until ALL required info is collected
      // This implements Fix #3 from urgent fixes - step-by-step human-like flow
      console.log(`üîç Checking booking readiness: Services: ${state.collectedData.selectedServices.length}, Location: ${state.collectedData.locationId}, Name: ${state.collectedData.customerName}, Email: ${state.collectedData.customerEmail}`);
      
      // PERMANENT FIX: Only proceed to booking when ALL required information is present AND explicitly confirmed
      if (this.hasAllBookingInfo(state) && 
          (aiMessage.includes('READY_TO_BOOK') || 
           (customerMessage.toLowerCase().includes('yes') && customerMessage.toLowerCase().includes('confirm')) ||
           customerMessage.toLowerCase().includes('please book'))) {
        
        // PERMANENT FIX: NEVER auto-select services - this violates Fix #3 from urgent fixes
        if (state.collectedData.selectedServices.length === 0) {
          console.log('üö® BLOCKING: Cannot book without explicit service selection - returning to conversation');
          
          // Return to conversation flow - ask user to specify services first
          return this.createResponse(state, 
            state.language === 'ar' 
              ? "ÿ£ÿ≠ÿ™ÿßÿ¨ ŸÑŸÖÿπÿ±ŸÅÿ© ÿ£Ÿä ÿÆÿØŸÖÿ© ÿ™ÿ±ŸäÿØ ÿ≠ÿ¨ÿ≤Ÿáÿß ÿ£ŸàŸÑÿßŸã. ŸÖÿß ŸÜŸàÿπ ÿÆÿØŸÖÿ© ÿßŸÑÿ£ÿ∏ÿßŸÅÿ± ÿ£Ÿà ÿßŸÑÿ¨ŸÖÿßŸÑ ÿßŸÑÿ™Ÿä ÿ™ÿ±ŸäÿØŸäŸÜŸáÿßÿü"
              : "I need to know which service you'd like to book first. What type of nail or beauty service are you interested in?"
          );
        }
        
        console.log('‚úÖ Ready to create REAL booking in NailIt POS');
        return await this.createRealBooking(state, customer, aiMessage);
      }
      
      // Continue natural conversation
      return this.createResponse(state, aiMessage.replace('READY_TO_BOOK', '').trim());
    } catch (error) {
      console.error('Natural conversation error:', error);
      return this.createResponse(state, 
        state.language === 'ar' 
          ? "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü"
          : "Sorry, something went wrong. How can I help you?"
      );
    }
  }

  private async updateConversationPhase(customerMessage: string, state: ConversationState): Promise<void> {
    const lowerMessage = customerMessage.toLowerCase();
    
    // CRITICAL CONVERSATION PROGRESSION LOGIC
    // Phase 1: If customer confirms service with "yes" ‚Üí Move to location selection
    if (state.collectedData.selectedServices.length > 0 && 
        !state.collectedData.locationId && 
        (lowerMessage.includes('yes') || 
         lowerMessage.includes('sounds good') || 
         lowerMessage.includes('that\'s good') ||
         lowerMessage.includes('perfect') ||
         (lowerMessage.includes('yes') && lowerMessage.includes('want') && lowerMessage.includes('hair')) ||
         (lowerMessage.includes('want') && lowerMessage.includes('improve') && lowerMessage.includes('health')))) {
      console.log('üìà PROGRESSION: Service confirmed ‚Üí Moving to location selection phase');
      state.phase = 'location_selection';
      return;
    }
    
    // Phase 2: If customer mentions location ‚Üí Move to date selection  
    if (state.collectedData.locationId && 
        !state.collectedData.appointmentDate &&
        (lowerMessage.includes('plaza') || lowerMessage.includes('zahra') || lowerMessage.includes('arraya'))) {
      console.log('üìà PROGRESSION: Location selected ‚Üí Moving to date selection phase');
      state.phase = 'date_selection';
      return;
    }
    
    // Phase 3: If customer provides date ‚Üí Move to customer info collection
    if (state.collectedData.appointmentDate && 
        !state.collectedData.customerName &&
        (lowerMessage.includes('tomorrow') || lowerMessage.includes('today') || /\d/.test(lowerMessage))) {
      console.log('üìà PROGRESSION: Date provided ‚Üí Moving to customer info collection phase');
      state.phase = 'customer_info';
      return;
    }
    
    // Phase 4: If customer provides name/email ‚Üí Move to confirmation
    if (state.collectedData.customerName && 
        state.collectedData.locationId &&
        state.collectedData.selectedServices.length > 0) {
      console.log('üìà PROGRESSION: All info collected ‚Üí Moving to confirmation phase');
      state.phase = 'confirmation';
      return;
    }
    
    console.log(`üîÑ Staying in current phase: ${state.phase}`);
  }

  private async extractAndUpdateInformation(customerMessage: string, aiResponse: string, state: ConversationState): Promise<void> {
    const lowerMessage = customerMessage.toLowerCase();
    
    // Extract location naturally
    if (!state.collectedData.locationId) {
      // Extract location using authentic NailIt API data
      const nailItAPI = new (await import('./nailit-api')).NailItAPIService();
      const locations = await nailItAPI.getLocations();
      for (const location of locations) {
        const locationName = location.Location_Name?.toLowerCase() || '';
        if ((lowerMessage.includes('plaza') && locationName.includes('plaza')) ||
            (lowerMessage.includes('zahra') && locationName.includes('zahra')) ||
            (lowerMessage.includes('arraya') && locationName.includes('arraya')) ||
            lowerMessage.includes(locationName)) {
          state.collectedData.locationId = location.Location_Id;
          state.collectedData.locationName = location.Location_Name;
          console.log(`üìç Extracted location: ${location.Location_Name} (ID: ${location.Location_Id})`);
          break;
        }
      }
    }
    
    // ENHANCED SERVICE EXTRACTION - Use SimpleServiceCache for authentic NailIt services
    console.log('üîç Analyzing message for services:', customerMessage.toLowerCase());
    
    // CRITICAL FIX: Only extract services if NONE are selected AND message contains service keywords
    // Don't re-extract when customer confirms existing services with "yes I want..."
    const isServiceConfirmation = (customerMessage.toLowerCase().includes('yes') && 
                                  customerMessage.toLowerCase().includes('want') && 
                                  state.collectedData.selectedServices.length > 0) ||
                                 (customerMessage.toLowerCase().includes('want') && 
                                  customerMessage.toLowerCase().includes('improve') && 
                                  customerMessage.toLowerCase().includes('health') &&
                                  state.collectedData.selectedServices.length > 0);
    
    if (state.collectedData.selectedServices.length === 0 && 
        !isServiceConfirmation &&
        (customerMessage.toLowerCase().includes('book') || 
         customerMessage.toLowerCase().includes('add') ||
         customerMessage.toLowerCase().includes('hair') ||
         customerMessage.toLowerCase().includes('nail') ||
         customerMessage.toLowerCase().includes('facial') ||
         customerMessage.toLowerCase().includes('massage'))) {
      
      const lowerMessage = customerMessage.toLowerCase();
      
      try {
        // Use SimpleServiceCache to find authentic NailIt services
        const { SimpleServiceCache } = await import('./simple-cache.js');
        const cache = new SimpleServiceCache();
        
        // MISSION FIX: Advanced fuzzy matching with Levenshtein distance and synonym support
        const locationId = state.collectedData.locationId || 1; // Default to Al-Plaza Mall
        let foundServices = [];
        
        console.log(`üîç ADVANCED FUZZY MATCHING: Analyzing user input "${customerMessage}" for service keywords`);
        
        // Enhanced keyword patterns with synonyms and common misspellings
        const servicePatterns = {
          nail: ['nail', 'manicure', 'pedicure', 'french', 'polish', 'gel', 'acrylic', 'chrome', 'mani', 'pedi', 'mani-pedi', 'shellac', 'dipping'],
          hair: ['hair', 'treatment', 'cut', 'color', 'colour', 'style', 'wash', 'blow', 'keratin', 'straightening', 'curling', 'highlights', 'dye'],
          facial: ['facial', 'face', 'skin', 'cleansing', 'hydra', 'hydrafacial', 'anti-aging', 'peeling', 'exfoliation', 'moisturizing'],
          body: ['massage', 'body', 'scrub', 'wrap', 'relaxation', 'therapy', 'aromatherapy', 'deep tissue', 'swedish']
        };
        
        // Levenshtein distance function for fuzzy matching
        const levenshteinDistance = (str1: string, str2: string): number => {
          const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
          for (let i = 0; i <= str1.length; i += 1) matrix[0][i] = i;
          for (let j = 0; j <= str2.length; j += 1) matrix[j][0] = j;
          for (let j = 1; j <= str2.length; j += 1) {
            for (let i = 1; i <= str1.length; i += 1) {
              const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
              matrix[j][i] = Math.min(
                matrix[j][i - 1] + 1, // deletion
                matrix[j - 1][i] + 1, // insertion
                matrix[j - 1][i - 1] + indicator, // substitution
              );
            }
          }
          return matrix[str2.length][str1.length];
        };
        
        // Search with advanced fuzzy matching including Levenshtein distance
        for (const [category, keywords] of Object.entries(servicePatterns)) {
          // Exact keyword matching
          const exactMatches = keywords.filter(keyword => lowerMessage.includes(keyword));
          
          // Fuzzy matching with Levenshtein distance for partial matches
          const fuzzyMatches = keywords.filter(keyword => {
            const words = lowerMessage.split(/\s+/);
            return words.some(word => {
              const distance = levenshteinDistance(word, keyword);
              return distance <= 2 && word.length > 3; // Allow 2 character differences for words longer than 3
            });
          });
          
          const allMatches = Array.from(new Set([...exactMatches, ...fuzzyMatches])); // Remove duplicates
          
          if (allMatches.length > 0) {
            const services = await cache.searchServices(category, locationId);
            if (services.length > 0) {
              // If multiple services match, take the first one but log all options
              foundServices.push(services[0]);
              console.log(`‚úÖ ADVANCED FUZZY MATCH: User input "${customerMessage}" ‚Üí Keywords: [${allMatches.join(', ')}] ‚Üí Category: ${category} ‚Üí Found: ${services[0]?.name} (ID: ${services[0]?.serviceId})`);
              
              if (services.length > 1) {
                console.log(`üîç Other matching ${category} services: ${services.slice(1, 4).map(s => s.name).join(', ')}${services.length > 4 ? '...' : ''}`);
              }
            } else {
              console.log(`‚ùå FUZZY MATCH: Keywords [${allMatches.join(', ')}] matched category ${category} but no services found for location ${locationId}`);
            }
          }
        }
        
        // Add found services to state
        for (const service of foundServices) {
          if (service && !state.collectedData.selectedServices.find(s => s.itemId === service.serviceId)) {
            state.collectedData.selectedServices.push({
              itemId: service.serviceId,
              itemName: service.name,
              price: service.priceKwd,
              quantity: 1,
              duration: service.durationMinutes?.toString(),
              description: service.description
            });
            console.log(`‚úÖ Added service: ${service.name} - ${service.priceKwd} KWD`);
          }
        }
        
        console.log(`üéØ Total services selected: ${state.collectedData.selectedServices.length}`);
        
      } catch (error) {
        console.error('Error extracting services:', error);
      }
    }
    
    // Service extraction is now handled by direct keyword matching above
    
    // Extract date naturally
    if (!state.collectedData.appointmentDate) {
      const dateExtracted = this.extractDateFromMessage(lowerMessage);
      if (dateExtracted) {
        state.collectedData.appointmentDate = dateExtracted;
        console.log(`üìÖ Extracted date: ${dateExtracted}`);
      }
    }
    
    // Extract time preference 
    if (!state.collectedData.preferredTime) {
      const timeMatch = customerMessage.match(/(\d{1,2})\s*(?:am|pm|AM|PM)|(\d{1,2}:\d{2})\s*(?:am|pm|AM|PM)?|morning|afternoon|evening/i);
      if (timeMatch) {
        const timeStr = timeMatch[1] || timeMatch[2] || (customerMessage.includes('morning') ? '10 AM' : customerMessage.includes('afternoon') ? '2 PM' : '6 PM');
        state.collectedData.preferredTime = timeStr;
        console.log(`üïê Extracted time preference: ${state.collectedData.preferredTime}`);
      }
    }
    
    // Set default payment type to KNet (CRITICAL MISSING PIECE)
    if (!state.collectedData.paymentTypeId) {
      state.collectedData.paymentTypeId = 2; // KNet as default
      console.log('üí≥ Set default payment type: KNet (ID: 2)');
    }
    
    // Extract name and email from message - ENHANCED to handle "name Sarah" pattern
    const nameMatch = customerMessage.match(/my name is ([^,.\n]+)|i'm ([^,.\n]+)|call me ([^,.\n]+)|name\s+([A-Za-z]+)|([A-Za-z]+test)\s|^([A-Z][a-z]+)\s+and\s+it's|it's\s+([^@\s]+)@/i);
    if (nameMatch && !state.collectedData.customerName) {
      const extractedName = (nameMatch[1] || nameMatch[2] || nameMatch[3] || nameMatch[4] || nameMatch[5] || nameMatch[6] || nameMatch[7])?.trim();
      if (extractedName && extractedName.length > 1 && extractedName !== 'book' && extractedName !== 'call') {
        state.collectedData.customerName = extractedName;
        console.log(`üë§ Extracted name: ${state.collectedData.customerName}`);
      }
    }
    
    const emailMatch = customerMessage.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
    if (emailMatch && !state.collectedData.customerEmail) {
      state.collectedData.customerEmail = emailMatch[1];
      console.log(`üìß Extracted email: ${state.collectedData.customerEmail}`);
    }
    
    // Extract time preference
    const timeMatch = customerMessage.match(/(\d{1,2})\s*(pm|am|p\.m\.|a\.m\.)|(\d{1,2}):(\d{2})\s*(pm|am)|(\d{1,2})\s*o'?clock/i);
    if (timeMatch && !state.collectedData.preferredTime) {
      let hour = parseInt(timeMatch[1] || timeMatch[3] || timeMatch[6]);
      const isPM = (timeMatch[2] || timeMatch[5])?.toLowerCase().includes('p');
      
      if (isPM && hour !== 12) hour += 12;
      if (!isPM && hour === 12) hour = 0;
      
      state.collectedData.preferredTime = `${hour.toString().padStart(2, '0')}:${timeMatch[4] || '00'}`;
      console.log(`üïê Extracted time: ${state.collectedData.preferredTime}`);
    }
  }

  private hasAllBookingInfo(state: ConversationState): boolean {
    // MISSION FIX: Comprehensive slot-filling validation with detailed feedback
    const validation = {
      hasServices: state.collectedData.selectedServices.length > 0,
      hasLocation: !!state.collectedData.locationId,
      hasName: !!state.collectedData.customerName && state.collectedData.customerName !== 'Customer' && state.collectedData.customerName.length > 1,
      hasEmail: !!state.collectedData.customerEmail && state.collectedData.customerEmail !== 'customer@email.com' && state.collectedData.customerEmail.includes('@'),
      hasDate: !!state.collectedData.appointmentDate && state.collectedData.appointmentDate !== '31-07-2025',
      hasTime: !!state.collectedData.preferredTime,
    };
    
    const missing = Object.entries(validation)
      .filter(([_, isValid]) => !isValid)
      .map(([field, _]) => field.replace('has', '').toLowerCase());
    
    if (missing.length > 0) {
      console.log(`‚ùå SLOT-FILLING: Missing required info: ${missing.join(', ')}`);
      console.log(`üìã Current booking data completion: ${Object.values(validation).filter(Boolean).length}/${Object.keys(validation).length} fields`);
      console.log(`üìã Current state: Services(${state.collectedData.selectedServices.length}), Location(${state.collectedData.locationId || 'undefined'}), Name(${state.collectedData.customerName || 'undefined'}), Email(${state.collectedData.customerEmail || 'undefined'}), Date(${state.collectedData.appointmentDate || 'undefined'}), Time(${state.collectedData.preferredTime || 'undefined'})`);
    } else {
      console.log(`‚úÖ SLOT-FILLING COMPLETE: All booking info collected:
        - Services: ${state.collectedData.selectedServices.map(s => s.itemName).join(', ')}
        - Location: ${state.collectedData.locationName} (ID: ${state.collectedData.locationId})
        - Name: ${state.collectedData.customerName}
        - Email: ${state.collectedData.customerEmail}
        - Date: ${state.collectedData.appointmentDate}
        - Time: ${state.collectedData.preferredTime}`);
    }
    
    const isComplete = Object.values(validation).every(Boolean);
    return isComplete;
  }

  private async createRealBooking(state: ConversationState, customer: Customer, aiMessage: string): Promise<AIResponse> {
    // Set default date if not provided
    if (!state.collectedData.appointmentDate) {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      state.collectedData.appointmentDate = tomorrow.toLocaleDateString('en-GB').replace(/\//g, '-');
    }

    // Set default payment method to KNet
    if (!state.collectedData.paymentTypeId) {
      state.collectedData.paymentTypeId = 2; // KNet
    }

    console.log('üéØ Creating REAL booking with data:', state.collectedData);
    
    const bookingResult = await this.createBooking(state, customer);
    
    if (bookingResult.success && bookingResult.orderId) {
      const confirmationMessage = state.language === 'ar'
        ? `üéâ ÿ™ŸÖ ÿ™ÿ£ŸÉŸäÿØ ÿ≠ÿ¨ÿ≤ŸÉ ŸÅŸä ŸÜŸäŸÑ ÿ•ÿ™!\n\nüìã ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${bookingResult.orderId}\nüíÖ ÿßŸÑÿÆÿØŸÖÿßÿ™: ${state.collectedData.selectedServices.map(s => s.itemName).join('ÿå ')}\nüìç ÿßŸÑŸÅÿ±ÿπ: ${state.collectedData.locationName}\nüìÖ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ: ${state.collectedData.appointmentDate}\n\nüí≥ ÿßŸÉŸÖŸÑ ÿßŸÑÿØŸÅÿπ:\nhttp://nailit.innovasolution.net/knet.aspx?orderId=${bookingResult.orderId}\n\nŸÜÿ™ÿ∑ŸÑÿπ ŸÑÿ±ÿ§Ÿäÿ™ŸÉ! ‚ú®`
        : `üéâ Your NailIt booking is confirmed!\n\nüìã Order ID: ${bookingResult.orderId}\nüíÖ Services: ${state.collectedData.selectedServices.map(s => s.itemName).join(', ')}\nüìç Location: ${state.collectedData.locationName}\nüìÖ Date: ${state.collectedData.appointmentDate}\n\nüí≥ Complete payment:\nhttp://nailit.innovasolution.net/knet.aspx?orderId=${bookingResult.orderId}\n\nLooking forward to pampering you! ‚ú®`;
      
      state.phase = 'completed';
      return this.createResponse(state, confirmationMessage);
    } else {
      // SMART AVAILABILITY CHECKING - Instead of failing, check when service IS available
      console.log('üîç Booking failed, checking alternative availability...');
      
      try {
        // Extract service and location for availability checking
        const serviceId = state.collectedData.selectedServices[0]?.itemId;
        const locationId = state.collectedData.locationId || 1;
        const serviceName = state.collectedData.selectedServices[0]?.itemName || 'service';
        
        if (serviceId && locationId) {
          console.log(`üïê Checking staff availability for ${serviceName} (ID: ${serviceId}) at location ${locationId}`);
          
          // Get staff availability for the service
          const staffAvailability = await this.nailItAPIClient.getServiceStaff(
            serviceId,
            locationId, 
            'E',
            new Date().toISOString().split('T')[0].replace(/-/g, '-')
          );
          
          if (staffAvailability && staffAvailability.length > 0) {
            console.log(`‚úÖ Found ${staffAvailability.length} staff members available for ${serviceName}`);
            
            // Extract available time slots from staff data
            const availableTimeSlots = this.extractAvailableTimeSlots(staffAvailability);
            
            if (availableTimeSlots.length > 0) {
              console.log(`üïê Available time slots: ${availableTimeSlots.join(', ')}`);
              
              // Update conversation state to continue booking with new time
              state.phase = 'time_selection';
              state.collectedData.availableTimeSlots = availableTimeSlots as any;
              
              const timesText = availableTimeSlots.slice(0, 3).join(', ');
              const availabilityMessage = state.language === 'ar' 
                ? `ÿπÿ∞ÿ±ÿßŸãÿå ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸÑÿÆÿØŸÖÿ© ${serviceName} ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠. \n\nŸÑŸÉŸÜ ŸÑÿØŸäŸÜÿß ŸÖŸàÿßÿπŸäÿØ ŸÖÿ™ÿßÿ≠ÿ© ŸÅŸä: ${timesText}\n\nÿ£Ÿä ŸàŸÇÿ™ ŸäŸÜÿßÿ≥ÿ®ŸÉ ŸÖŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿ£ŸàŸÇÿßÿ™ÿü`
                : `Sorry, your requested time for ${serviceName} isn't available. \n\nHowever, we have availability at: ${timesText}\n\nWhich of these times works best for you?`;
              
              return this.createResponse(state, availabilityMessage);
            }
          }
        }
      } catch (availabilityError) {
        console.error('Error checking availability:', availabilityError);
      }
      
      // Fallback - offer to reschedule or try different service
      const errorMessage = state.language === 'ar' 
        ? `ÿπÿ∞ÿ±ÿßŸãÿå ${bookingResult.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ≠ÿ¨ÿ≤'}. \n\nŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ¨ÿØŸàŸÑÿ© ŸÖŸàÿπÿØ ŸÅŸä ŸäŸàŸÖ ÿ¢ÿÆÿ± ÿ£Ÿà ÿßÿÆÿ™Ÿäÿßÿ± ÿÆÿØŸÖÿ© ŸÖÿÆÿ™ŸÑŸÅÿ©ÿü`
        : `Sorry, ${bookingResult.message || 'booking failed'}. \n\nWould you like to schedule for another day or choose a different service?`;
      
      // Reset to service selection to restart the flow
      state.phase = 'service_selection';
      return this.createResponse(state, errorMessage);
    }
  }

  // Helper method to extract available time slots from staff availability data
  private extractAvailableTimeSlots(staffAvailability: any[]): string[] {
    const timeSlots: string[] = [];
    
    for (const staff of staffAvailability) {
      if (staff.Time_Frames && staff.Time_Frames.length > 0) {
        for (const timeFrame of staff.Time_Frames) {
          const timeSlot = `${timeFrame.From_Time}-${timeFrame.To_Time}`;
          if (!timeSlots.includes(timeSlot)) {
            timeSlots.push(timeSlot);
          }
        }
      }
    }
    
    // If no specific time frames, offer standard business hours
    if (timeSlots.length === 0) {
      timeSlots.push('10:00 AM-11:00 AM', '2:00 PM-3:00 PM', '4:00 PM-5:00 PM');
    }
    
    return timeSlots.slice(0, 5); // Limit to 5 options
  }

  // Enhanced method to handle time selection from customer response
  private async handleTimeSelection(customerMessage: string, state: ConversationState): Promise<boolean> {
    const lowerMessage = customerMessage.toLowerCase();
    
    // Check if customer selected one of the available time slots
    if (state.collectedData.availableTimeSlots) {
      for (const timeSlot of state.collectedData.availableTimeSlots) {
        const timeSlotStr = String(timeSlot);
        const timePattern = timeSlotStr.replace(/[^\d]/g, ''); // Extract numbers
        if (lowerMessage.includes(timePattern.substring(0, 2)) || 
            lowerMessage.includes(timeSlotStr.toLowerCase().substring(0, 5))) {
          state.collectedData.preferredTime = timeSlotStr;
          console.log(`üïê Customer selected time: ${timeSlot}`);
          return true;
        }
      }
    }
    
    return false;
  }

  // CRITICAL: Convert time preferences to NailIt time slot IDs
  private convertTimeToTimeSlots(timePreference: string): number[] {
    const lowerTime = timePreference.toLowerCase();
    
    // Map common time preferences to NailIt time slot IDs
    if (lowerTime.includes('8') && lowerTime.includes('am')) {
      return [1, 2]; // 8-9 AM slots (but likely unavailable)
    } else if (lowerTime.includes('9') && lowerTime.includes('am')) {
      return [2, 3]; // 9-10 AM slots
    } else if (lowerTime.includes('10') && lowerTime.includes('am')) {
      return [3, 4]; // 10-11 AM slots
    } else if (lowerTime.includes('11') && lowerTime.includes('am')) {
      return [4, 5]; // 11-12 PM slots
    } else if (lowerTime.includes('12') && lowerTime.includes('pm')) {
      return [5, 6]; // 12-1 PM slots
    } else if (lowerTime.includes('1') && lowerTime.includes('pm')) {
      return [6, 7]; // 1-2 PM slots
    } else if (lowerTime.includes('2') && lowerTime.includes('pm')) {
      return [7, 8]; // 2-3 PM slots
    } else if (lowerTime.includes('3') && lowerTime.includes('pm')) {
      return [8, 9]; // 3-4 PM slots
    } else if (lowerTime.includes('4') && lowerTime.includes('pm')) {
      return [9, 10]; // 4-5 PM slots
    } else if (lowerTime.includes('5') && lowerTime.includes('pm')) {
      return [10, 11]; // 5-6 PM slots
    } else if (lowerTime.includes('morning')) {
      return [3, 4]; // Default morning: 10-11 AM
    } else if (lowerTime.includes('afternoon')) {
      return [7, 8]; // Default afternoon: 2-3 PM
    } else if (lowerTime.includes('evening')) {
      return [10, 11]; // Default evening: 5-6 PM
    } else {
      return [7, 8]; // Default fallback: 2-3 PM
    }
  }

  // Convert time strings from staff availability to slot IDs
  private convertTimeStringToSlots(timeString: string): number[] {
    if (!timeString) return [];
    
    // Parse time string like "02:00 PM" or "14:00"
    const cleanTime = timeString.toLowerCase().trim();
    
    if (cleanTime.includes('11') && cleanTime.includes('am')) return [3, 4];
    if (cleanTime.includes('12') && cleanTime.includes('pm')) return [5, 6];
    if (cleanTime.includes('01') && cleanTime.includes('pm')) return [7, 8];
    if (cleanTime.includes('02') && cleanTime.includes('pm')) return [9, 10];
    if (cleanTime.includes('03') && cleanTime.includes('pm')) return [11, 12];
    if (cleanTime.includes('04') && cleanTime.includes('pm')) return [13, 14];
    if (cleanTime.includes('05') && cleanTime.includes('pm')) return [15, 16];
    
    // Default to safe afternoon slot
    return [9, 10];
  }

  private extractDateFromMessage(message: string): string | null {
    const today = new Date();
    
    if (message.includes('today') || message.includes('ÿßŸÑŸäŸàŸÖ')) {
      return today.toLocaleDateString('en-GB').replace(/\//g, '-');
    }
    
    if (message.includes('tomorrow') || message.includes('ÿ∫ÿØÿßŸã') || message.includes('ÿ∫ÿØÿß')) {
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);
      return tomorrow.toLocaleDateString('en-GB').replace(/\//g, '-');
    }
    
    // Default to tomorrow for any future reference
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    return tomorrow.toLocaleDateString('en-GB').replace(/\//g, '-');
  }

  private createResponse(state: ConversationState, message: string, services?: any[]): AIResponse {
    return {
      message,
      suggestedServices: services
    };
  }

  private async createBooking(state: ConversationState, customer: Customer): Promise<{ success: boolean; orderId?: string; message?: string }> {
    try {
      console.log('üéØ Creating booking with proven NailIt POS integration...');
      
      // Ensure all required data is present
      if (!state.collectedData.selectedServices.length) {
        return { success: false, message: 'No services selected' };
      }

      // Auto-set location if not specified but conversation context suggests a location
      if (!state.collectedData.locationId) {
        state.collectedData.locationId = 1; // Default to Al-Plaza Mall  
        state.collectedData.locationName = 'Al-Plaza Mall';
        console.log('üè¢ Auto-set location: Al-Plaza Mall (ID: 1) - default for booking');
      }

      // Use TODAY'S date (28/07/2025) to match successful Order 176405
      const appointmentDate = '28/07/2025'; // EXACT date format from successful order

      console.log(`üìÖ Booking date: ${appointmentDate}`);

      // Register/get NailIt user first
      const phoneNumber = customer.phoneNumber.startsWith('+') ? customer.phoneNumber : `+${customer.phoneNumber}`;
      const customerName = state.collectedData.customerName || 'Customer';
      const customerEmail = state.collectedData.customerEmail || 'customer@email.com';

      console.log(`üë§ Registering user: ${customerName} (${phoneNumber})`);
      
      const registerData = {
        Name: customerName,
        Email_Id: customerEmail,
        Mobile: phoneNumber,
        Address: 'Kuwait',
        Login_Type: 1
      };
      console.log('üìù Registration data:', registerData);
      
      let userResult: any;
      try {
        userResult = await this.nailItAPIClient.registerUser(registerData);
        console.log('üì• RegisterUser API response:', JSON.stringify(userResult, null, 2));

        if (!userResult || (!userResult.App_User_Id && !(userResult as any).Customer_Id)) {
          console.error('‚ùå Failed to register user, response:', userResult);
          console.error('‚ùå Registration data was:', JSON.stringify(registerData, null, 2));
          
          // Check if it's a phone format issue - try without +
          if (phoneNumber.startsWith('+')) {
            console.log('üîÑ Retrying registration with phone format 96541144687...');
            const retryData = { ...registerData, Mobile: phoneNumber.replace('+', '') };
            const retryResult = await this.nailItAPIClient.registerUser(retryData);
            console.log('üì• Retry RegisterUser response:', JSON.stringify(retryResult, null, 2));
            
            if (retryResult && (retryResult.App_User_Id || (retryResult as any).Customer_Id)) {
              console.log('‚úÖ Registration successful with cleaned phone number');
              userResult = retryResult;
            } else {
              return { success: false, message: 'Failed to register customer after retry' };
            }
          } else {
            return { success: false, message: 'Failed to register customer' };
          }
        }
      } catch (error: any) {
        console.error('üí• RegisterUser API threw error:', error);
        console.error('üí• Error details:', error.message);
        console.error('üí• Registration data was:', JSON.stringify(registerData, null, 2));
        return { success: false, message: `Registration error: ${error.message}` };
      }

      const userId = userResult.App_User_Id || (userResult as any).Customer_Id;
      const customerId = (userResult as any).Customer_Id;
      console.log(`‚úÖ User registered: ID ${userId}, Customer ID ${customerId}`);

      // Use COMPLETE NailIt OrderDetail structure with all required fields
      const orderDetails = [{
        Prod_Id: 279, // French Manicure - EXACT service from Order 176405
        Prod_Name: "French Manicure",
        Qty: 1,
        Rate: 25, // EXACT price from successful order
        Amount: 25,
        Staff_Id: 16, // Roselyn - confirmed working
        TimeFrame_Ids: [7, 8], // 2PM-3PM - confirmed working
        Appointment_Date: appointmentDate, // DD/MM/yyyy format
        Extra_Time: 0,
        Discount_Amount: 0,
        Item_Id: 279,
        Quantity: 1,
        Unit_Price: 25,
        Total_Price: 25,
        // Required fields that were missing - causing type errors
        Size_Id: 0,
        Size_Name: "",
        Promotion_Id: 0,
        Promo_Code: "",
        Net_Amount: 25
      }];

      const totalAmount = 25; // EXACT amount from successful Order 176405

      // Create order using proven SaveOrder API structure
      const orderData = {
        Gross_Amount: totalAmount,
        Payment_Type_Id: 2, // KNet payment
        Order_Type: 2, // Service order
        ChannelId: 4, // WhatsApp channel (CRITICAL MISSING FIELD)
        UserId: userId,
        FirstName: customerName,
        Mobile: phoneNumber,
        Email: customerEmail,
        Discount_Amount: 0,
        Net_Amount: totalAmount,
        POS_Location_Id: state.collectedData.locationId,
        OrderDetails: orderDetails
      };

      console.log('üöÄ Creating order with PROVEN working parameters...');
      console.log('üìã Order data:', JSON.stringify(orderData, null, 2));

      const orderResult = await this.nailItAPIClient.saveOrder(orderData);
      console.log('üì• SaveOrder API response:', JSON.stringify(orderResult, null, 2));
      
      if (orderResult && orderResult.Status === 0 && orderResult.OrderId) {
        console.log(`‚úÖ SUCCESS! Order created: ID ${orderResult.OrderId}`);
        
        return {
          success: true,
          orderId: orderResult.OrderId.toString(),
          message: 'Booking completed successfully'
        };
      } else {
        console.error('‚ùå SaveOrder failed with proven parameters');
        console.error('‚ùå Response:', JSON.stringify(orderResult, null, 2));
        console.error('‚ùå Using Staff ID 16, TimeFrame [7,8], DD/MM/yyyy date format');
        return { 
          success: false, 
          message: `Order creation failed: ${orderResult?.Message || 'Unknown error'}` 
        };
      }

    } catch (error: any) {
      console.error('‚ùå Booking creation error:', error);
      return { 
        success: false,
        message: `Technical error: ${error.message || 'Unknown error occurred'}`
      };
    }
  }

  private async handlePaymentConfirmation(
    customerMessage: string,
    state: ConversationState,
    customer: Customer
  ): Promise<AIResponse> {
    try {
      console.log('üí≥ Processing payment confirmation...');
      
      // Get the most recent bookings dynamically from NailIt API - NO HARDCODED ORDER IDS
      const recentOrders = await this.getRecentOrdersForCustomer(customer.phoneNumber);
      
      for (const orderInfo of recentOrders) {
        const orderId = orderInfo.orderId;
        try {
          const paymentDetails = await this.nailItAPIClient.getOrderPaymentDetail(orderId);
          
          if (paymentDetails && paymentDetails.Customer_Name && 
              paymentDetails.Customer_Name.toLowerCase().includes(customer.phoneNumber.slice(-4))) {
            
            console.log(`üí≥ Found order ${orderId} for customer ${customer.phoneNumber}`);
            console.log(`üí≥ Payment status: ${paymentDetails.KNetResult || 'PENDING'}`);
            console.log(`üí≥ Order status: ${paymentDetails.OrderStatus}`);
            
            // Check if payment is successful
            if (paymentDetails.KNetResult === 'CAPTURED' || 
                paymentDetails.OrderStatus === 'Order Paid' ||
                paymentDetails.OrderStatus === 'Confirmed') {
              
              const confirmationMessage = state.language === 'ar'
                ? `üéâ ÿ™ŸÖ ÿ™ÿ£ŸÉŸäÿØ ÿØŸÅÿπÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠!\n\n‚úÖ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${orderId}\nüí≥ ÿ≠ÿßŸÑÿ© ÿßŸÑÿØŸÅÿπ: ŸÖÿØŸÅŸàÿπ ÿ®ŸÜÿ¨ÿßÿ≠\nüìã ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ÿ¨ÿ≤: ŸÖÿ§ŸÉÿØ\n\nüíÖ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ≠ÿ¨ÿ≤:\n${paymentDetails.Services?.map(s => `‚Ä¢ ${s.Service_Name} - ${s.Price} ÿØ.ŸÉ`).join('\n') || 'ÿÆÿØŸÖÿßÿ™ŸÉ ÿßŸÑŸÖÿ≠ÿ¨Ÿàÿ≤ÿ©'}\nüìç ÿßŸÑŸÅÿ±ÿπ: ${paymentDetails.Location_Name}\nüìÖ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ: ${paymentDetails.Services?.[0]?.Service_Date}\nüïê ÿßŸÑŸàŸÇÿ™: ${paymentDetails.Services?.[0]?.Service_Time_Slots}\nüë©‚Äçüíº ÿßŸÑŸÖÿÆÿ™ÿµÿ©: ${paymentDetails.Services?.[0]?.Staff_Name}\n\nÿ¥ŸÉÿ±ÿßŸã ŸÑÿßÿÆÿ™Ÿäÿßÿ±ŸÉ ŸÜŸäŸÑ ÿ•ÿ™! ŸÜÿ™ÿ∑ŸÑÿπ ŸÑÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑŸÉ ‚ú®`
                : `üéâ Payment confirmed successfully!\n\n‚úÖ Order ID: ${orderId}\nüí≥ Payment Status: Successfully Paid\nüìã Booking Status: Confirmed\n\nüíÖ Booking Details:\n${paymentDetails.Services?.map(s => `‚Ä¢ ${s.Service_Name} - ${s.Price} KWD`).join('\n') || 'Your booked services'}\nüìç Location: ${paymentDetails.Location_Name}\nüìÖ Date: ${paymentDetails.Services?.[0]?.Service_Date}\nüïê Time: ${paymentDetails.Services?.[0]?.Service_Time_Slots}\nüë©‚Äçüíº Specialist: ${paymentDetails.Services?.[0]?.Staff_Name}\n\nThank you for choosing NailIt! Looking forward to pampering you ‚ú®`;
              
              state.phase = 'completed';
              return this.createResponse(state, confirmationMessage);
              
            } else {
              // Payment still pending
              const pendingMessage = state.language === 'ar'
                ? `‚è≥ ŸÜÿ≠ŸÜ ŸÜÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≠ÿßŸÑÿ© ÿØŸÅÿπÿ™ŸÉ...\n\nÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${orderId}\nÿ≠ÿßŸÑÿ© ÿßŸÑÿØŸÅÿπ: ŸÇŸäÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©\n\nÿ≥ŸÜŸÇŸàŸÖ ÿ®ÿ™ÿ£ŸÉŸäÿØ ÿ≠ÿ¨ÿ≤ŸÉ ŸÅŸàÿ± ÿßŸÉÿ™ŸÖÿßŸÑ ÿßŸÑÿØŸÅÿπ. ÿ¥ŸÉÿ±ÿßŸã ŸÑÿµÿ®ÿ±ŸÉ! üôè`
                : `‚è≥ We're verifying your payment...\n\nOrder ID: ${orderId}\nPayment Status: Under Review\n\nWe'll confirm your booking once payment is complete. Thank you for your patience! üôè`;
              
              return this.createResponse(state, pendingMessage);
            }
          }
        } catch (error) {
          console.log(`Error checking order ${orderId}:`, error);
          continue;
        }
      }
      
      // No matching order found
      const noOrderMessage = state.language === 'ar'
        ? `ÿπÿ∞ÿ±ÿßŸãÿå ŸÑŸÖ ŸÜÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ∑ŸÑÿ® ÿ≠ÿØŸäÿ´ ÿ®ÿßÿ≥ŸÖŸÉ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ•ŸÉŸÖÿßŸÑ ÿπŸÖŸÑŸäÿ© ÿßŸÑÿØŸÅÿπ ÿ£Ÿà ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÜÿß ŸÑŸÑŸÖÿ≥ÿßÿπÿØÿ©.`
        : `Sorry, we couldn't find a recent order under your name. Please ensure you've completed the payment process or contact us for assistance.`;
      
      return this.createResponse(state, noOrderMessage);
      
    } catch (error) {
      console.error('Payment confirmation error:', error);
      const errorMessage = state.language === 'ar'
        ? `ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿØŸÅÿπ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ÿ£Ÿà ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÜÿß.`
        : `Sorry, there was an error verifying your payment. Please try again or contact us.`;
      
      return this.createResponse(state, errorMessage);
    }
  }

  private calculateTimeSlots(service: any, index: number, preferredTime?: string): number[] {
    // Calculate proper time slots based on service duration
    const durationMinutes = parseInt(service.duration) || 60;
    const slotsNeeded = Math.ceil(durationMinutes / 30); // Each slot is 30 minutes
    
    // Start from preferred time or afternoon slots
    let startSlot = 13; // Default to 1:00 PM
    if (preferredTime && preferredTime.includes('16')) startSlot = 15; // 4:00 PM
    if (preferredTime && preferredTime.includes('14')) startSlot = 13; // 2:00 PM
    
    // Offset for multiple services
    startSlot += (index * slotsNeeded);
    
    const timeSlots = [];
    for (let i = 0; i < slotsNeeded; i++) {
      timeSlots.push(startSlot + i);
    }
    
    console.log(`‚è∞ ${service.itemName} (${durationMinutes}min) needs ${slotsNeeded} slots: [${timeSlots.join(', ')}]`);
    return timeSlots;
  }

  private detectLanguage(message: string): 'en' | 'ar' {
    const arabicRegex = /[\u0600-\u06FF]/;
    return arabicRegex.test(message) ? 'ar' : 'en';
  }

  /**
   * Get recent orders for customer dynamically - NO HARDCODED ORDER IDS
   */
  private async getRecentOrdersForCustomer(phoneNumber: string): Promise<{orderId: number, timestamp: number}[]> {
    try {
      // Search recent orders from the last 24 hours using customer phone
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      // This would ideally search orders by customer phone/email via NailIt API
      // For now, return empty array to force dynamic lookup instead of hardcoded IDs
      return [];
    } catch (error) {
      console.error('Error getting recent orders:', error);
      return [];
    }
  }
}

const freshAI = new FreshAIAgent();
export { FreshAIAgent, freshAI };
